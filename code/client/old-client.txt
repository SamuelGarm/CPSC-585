
#define SDL_MAIN_HANDLED
#include "GL/glew.h"
#include <iostream>
#include "SDL.h"
#include "SDL_opengl.h"

SDL_Window *window = NULL; // the window we render to

const int SCREEN_WIDTH{ 680 };
const int SCREEN_HEIGHT{ 480 };

bool initGL();
void render();
void close();

//Shader loading utility programs
void printProgramLog(GLuint program);
void printShaderLog(GLuint shader);

//Graphics program
GLuint gProgramID = 0;
GLint gVertexPos2DLocation = -1;
GLuint gVBO = 0;
GLuint gIBO = 0;

SDL_GLContext g_glContext;

int main()
{
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
    {
        std::cout << "Failed to initialize the SDL2 library\n";
        return -1;
    }
    else {
        //Use OpenGL 3.1 core
        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
        SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    }

    window = SDL_CreateWindow("SDL2 Window",
                                          SDL_WINDOWPOS_CENTERED,
                                          SDL_WINDOWPOS_CENTERED,
                                          SCREEN_WIDTH, SCREEN_HEIGHT,
                                          SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);

    if (!window)
    {
        std::cout << "Failed to create window\n";
        return -1;
    }
    else {

        g_glContext = SDL_GL_CreateContext(window);

        if (g_glContext == NULL)
        {
            printf("OpenGL context could not be created! SDL Error: %s\n", SDL_GetError());
            return -1;
        }
        else
        {
            glewExperimental = GL_TRUE;
            GLenum error = glewInit();
            //Check for error
            if (error != GL_NO_ERROR)
            {
                printf("Error initializing OpenGL! %s\n", glewGetErrorString(error));
                return -1;
            }

            std::cout << "glew initialized!" << std::endl;
            std::cout << "using OpenGL version " << glGetString(GL_VERSION) << std::endl;

            //Use Vsync
            if (SDL_GL_SetSwapInterval(1) < 0)
            {
                printf("Warning: Unable to set VSync! SDL Error: %s\n", SDL_GetError());
            }

            //Initialize OpenGL
            if (!initGL())
            {
                printf("Unable to initialize OpenGL!\n");
                return -1;
            }
        }
    }


    SDL_Surface *window_surface = SDL_GetWindowSurface(window);

    if (!window_surface)
    {
        std::cout << "Failed to get the surface from the window\n";
        return -1;
    }

    SDL_PumpEvents();
    SDL_PumpEvents();
    SDL_PumpEvents();

    bool quit{false};
    // Event handler
    SDL_Event e;

    while (!quit)
    {

        while (SDL_PollEvent(&e) != 0)
        {
            if (e.type == SDL_QUIT)
            {
                quit = true;
            }
        }

        // render
        render();

        SDL_GL_SwapWindow(window);

    }
    close();
}


void render() {
    //Clear color buffer
    glClear(GL_COLOR_BUFFER_BIT);

    //Render quad
    glBegin(GL_TRIANGLES);
    glVertex2f(-0.5f, -0.5f);
    glVertex2f(0.5f, -0.5f);
    glVertex2f(0.5f, 0.5f);
    glEnd();
    
}

void close()
{
    // Destroy window
    SDL_DestroyWindow(window);
    window = NULL;

    // Quit SDL subsystems
    SDL_Quit();
}

bool initGL()
{


    bool success = true;
    GLenum error;

    //Make sure OpenGL 3.3 is supported
    if (!GLEW_VERSION_3_3)
    {
        printf("OpenGL 3.3 not supported!\n");
        return false;
    }

    //Initialize Modelview Matrix
    glViewport(0.f, 0.f, SCREEN_WIDTH, SCREEN_HEIGHT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, SCREEN_WIDTH, SCREEN_HEIGHT, 0.0, 1.0, -1.0);

    //Check for error
    error = glGetError();
    if (error != GL_NO_ERROR)
    {
        printf("Error initializing OpenGL! %s\n", glewGetErrorString(error));
        success = false;
    }

    glLoadIdentity();
    //Check for error
    error = glGetError();
    if (error != GL_NO_ERROR)
    {
        printf("Error initializing OpenGL! %s\n", glewGetErrorString(error));
        success = false;
    }

    //Initialize clear color
    glClearColor(0.0f, 0.f, 0.f, 1.f);


    return success;
}

